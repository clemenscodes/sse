// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    output        = "../../../node_modules/@prisma/api"
    binaryTargets = ["native", "linux-musl"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String        @id @default(cuid())
    username      String        @unique
    email         String        @unique
    emailVerified DateTime?
    password      String
    salt          Bytes
    notes         Note[]
    accounts      Account[]
    sessions      Session[]
    refreshToken  RefreshToken?
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken {
    id           String   @id @default(cuid())
    refreshToken String   @unique
    expires      DateTime
    userId       String   @unique
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Note {
    id        String   @id @default(cuid())
    content   String
    isPublic  Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Required Next-Auth OAuth schemas
model Account {
    id                String  @id @default(cuid())
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    userId            String
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

// Used with email verification
model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
