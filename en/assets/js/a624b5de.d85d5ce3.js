"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[804],{9362:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>a});var o=r(4512),t=r(3250);const i={slug:"/features/auth",label:"Features",sidebar_position:4},s="Autorisierung",l={unversionedId:"features/auth",id:"features/auth",title:"Autorisierung",description:"Autorisierung erfolgt \xfcber Cookies und JWT Tokens.",source:"@site/src/features/auth.mdx",sourceDirName:"features",slug:"/features/auth",permalink:"/sse/en/features/auth",draft:!1,unlisted:!1,editUrl:"https://github.com/clemenscodes/sse/edit/main/apps/notes/docs/src/features/auth.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{slug:"/features/auth",label:"Features",sidebar_position:4},sidebar:"defaultSidebar",previous:{title:"Passwort vergessen",permalink:"/sse/en/features/password-reset"},next:{title:"Notizen",permalink:"/sse/en/features/note"}},u={},a=[{value:"Allgemeine Sicherheitsmechanismen",id:"allgemeine-sicherheitsmechanismen",level:2}];function d(e){const n=Object.assign({h1:"h1",p:"p",h2:"h2",ul:"ul",li:"li",pre:"pre",code:"code"},(0,t.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"autorisierung",children:"Autorisierung"}),"\n",(0,o.jsx)(n.p,{children:'Autorisierung erfolgt \xfcber Cookies und JWT Tokens.\nJegliche Anfragen an das Backend mit Ausnahme der Anmeldung, Registrierung und Passwort vergessen Funktionalit\xe4t werden durch Autorisierungsguards gesch\xfctzt.\nDamit eine Anfrage an den Controller kommt, muss entweder ein g\xfcltiger JWT, Session-Cookie oder Auffrischungs-Cookie mitgesendet werden.\nZus\xe4tzlich gibt es rollenbasierte Autorisierung. Nutzer haben die Rolle "USER".\nBei den Endpunkten in der Anwendung ist es m\xf6glich Administrationsendpunkte zu kennzeichnen, die nur von Administratoren aufgerufen werden k\xf6nnen.\nAdministrationsfunktionalit\xe4t wurde nicht implementiert.'}),"\n",(0,o.jsx)(n.h2,{id:"allgemeine-sicherheitsmechanismen",children:"Allgemeine Sicherheitsmechanismen"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Security Middleware setzt Security Header bei jeder Response"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { NextFunction, Request, Response } from 'express';\n\n@Injectable()\nexport class SecurityMiddleware implements NestMiddleware {\n    use(req: Request, res: Response, next: NextFunction) {\n        res.setHeader('Content-Security-Policy', \"default-src 'self'\");\n        res.setHeader('X-Content-Type-Options', 'nosniff');\n        res.setHeader('X-Frame-Options', 'SAMEORIGIN');\n        res.setHeader(\n            'Strict-Transport-Security',\n            'max-age=31536000; includeSubDomains'\n        );\n        res.setHeader('Referrer-Policy', 'no-referrer');\n        next();\n    }\n}\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Globale ",(0,o.jsx)(n.code,{children:"ZodFilter"}),", ",(0,o.jsx)(n.code,{children:"PasswordFilter"})," und ",(0,o.jsx)(n.code,{children:"YouTubeFilter"})," fangen jegliche Exception und behandeln sie entsprechend"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"CORS"})," erlaubt nur Anfragen von definiertem Frontend und wenige HTTP-Methoden"]}),"\n",(0,o.jsxs)(n.li,{children:["Cookies werden mit ",(0,o.jsx)(n.code,{children:"cookie-parser"})," geparst"]}),"\n",(0,o.jsxs)(n.li,{children:["Weitere Security Headers und ",(0,o.jsx)(n.code,{children:"Content-Security-Policy"})," wird mit ",(0,o.jsx)(n.code,{children:"helmet"})," konfiguriert"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { NestFactory } from '@nestjs/core';\nimport { NestExpressApplication } from '@nestjs/platform-express';\nimport cookieParser from 'cookie-parser';\nimport helmet from 'helmet';\nimport { PasswordFilter } from './filter/password.filter';\nimport { YouTubeFilter } from './filter/youtube.filter';\nimport { ZodFilter } from './filter/zod.filter';\nimport { ApiModule } from './modules/api.module';\n\nexport async function bootstrap() {\n    const app = await NestFactory.create<NestExpressApplication>(ApiModule);\n    const configService = app.get(ConfigService);\n    const globalPrefix = 'api';\n    const host = '0.0.0.0';\n    const port = configService.get<number>('PORT') || 3000;\n    const frontend_url = configService.get<string>('FRONTEND_URL');\n    const secret = configService.get<string>('SECRET');\n    app.enableCors({\n        credentials: true,\n        methods: ['GET', 'POST'],\n        allowedHeaders: ['Content-Type', 'Authorization', 'Cookie'],\n        origin: frontend_url || 'http://localhost:4200',\n    });\n    app.setGlobalPrefix(globalPrefix);\n    app.useGlobalFilters(new ZodFilter());\n    app.useGlobalFilters(new PasswordFilter());\n    app.useGlobalFilters(new YouTubeFilter());\n    app.use(cookieParser(secret));\n    app.use(\n        helmet({\n            contentSecurityPolicy: {\n                directives: {\n                    imgSrc: [`'self'`],\n                    scriptSrc: [`'self'`],\n                    manifestSrc: [`'self'`],\n                    frameSrc: [`'self'`],\n                },\n            },\n        })\n    );\n    await app.listen(port);\n    Logger.log(\n        `\ud83d\ude80 Application is running on: http://${host}:${port}/${globalPrefix}`\n    );\n}\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Globaler Konfigurationsservice"}),"\n",(0,o.jsx)(n.li,{children:"Globales Throttling (10 Anfragen pro Minute)"}),"\n",(0,o.jsx)(n.li,{children:"Globale Rollenbasierte Autorisierung"}),"\n",(0,o.jsx)(n.li,{children:"Gloable JWT und Session Autorisierung"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import {\n    Global,\n    Logger,\n    MiddlewareConsumer,\n    Module,\n    ModuleMetadata,\n    NestModule,\n} from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { APP_GUARD } from '@nestjs/core';\nimport { ThrottlerGuard, ThrottlerModule } from '@nestjs/throttler';\nimport { SecurityMiddleware } from '../middleware/security.middleware';\nimport { AccountModule } from './account/account.module';\nimport { AuthModule } from './auth/auth.module';\nimport { RolesGuard } from './auth/roles.guard';\nimport { CookieModule } from './cookie/cookie.module';\nimport { HashModule } from './hash/hash.module';\nimport { JwtGuard } from './jwt/jwt.guard';\nimport { JwtModule } from './jwt/jwt.module';\nimport { NoteModule } from './note/note.module';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { RefreshTokenModule } from './refresh-token/refresh-token.module';\nimport { SessionModule } from './session/session.module';\nimport { UserModule } from './user/user.module';\nimport { VerificationTokenModule } from './verification-token/verification-token.module';\n\nconst modules: ModuleMetadata['imports'] = [\n    ConfigModule.forRoot({\n        cache: true,\n        isGlobal: true,\n        expandVariables: true,\n        envFilePath: ['.env', '.env.skeleton'],\n    }),\n    ThrottlerModule.forRootAsync({\n        imports: [ConfigModule],\n        inject: [ConfigService],\n        useFactory: (config: ConfigService) => ({\n            ttl: config.get('THROTTLE_TTL'),\n            limit: config.get('THROTTLE_LIMIT'),\n        }),\n    }),\n    PrismaModule,\n    UserModule,\n    NoteModule,\n    AuthModule,\n    SessionModule,\n    RefreshTokenModule,\n    VerificationTokenModule,\n    AccountModule,\n    CookieModule,\n    JwtModule,\n    HashModule,\n];\n\n@Global()\n@Module({\n    imports: [...modules],\n    exports: [...modules],\n    providers: [\n        {\n            provide: APP_GUARD,\n            useClass: JwtGuard,\n        },\n        {\n            provide: APP_GUARD,\n            useClass: RolesGuard,\n        },\n        {\n            provide: APP_GUARD,\n            useClass: ThrottlerGuard,\n        },\n        Logger,\n    ],\n})\nexport class ApiModule implements NestModule {\n    configure(consumer: MiddlewareConsumer) {\n        consumer.apply(SecurityMiddleware).forRoutes('*');\n    }\n}\n"})})]})}const c=function(e={}){const{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(d,e)})):d(e)}},3250:(e,n,r)=>{r.d(n,{Zo:()=>l,ah:()=>i});var o=r(2735);const t=o.createContext({});function i(e){const n=o.useContext(t);return o.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const s={};function l({components:e,children:n,disableParentContext:r}){let l;return l=r?"function"==typeof e?e({}):e||s:i(e),o.createElement(t.Provider,{value:l},n)}}}]);